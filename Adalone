import pandas as pd
import numpy as np
import seaborn as sns
import os
import pylab as pl
import matplotlib.pyplot as plt

os.chdir("C:\\Users\\zohaib khan\\OneDrive\\Desktop\\USE ME\\dump\\zk")

data = pd.read_csv("adalone.csv")

data.head()

pd.set_option('display.max_columns', None)

data.head()

#Check for missing values
data.isnull().sum()

from sklearn.impute import SimpleImputer

imputer=SimpleImputer(missing_values=np.nan,strategy='most_frequent',fill_value=None)

data["Arrival Delay in Minutes"].fillna("mean", inplace=True)

#Check for duplicate values
data[data.duplicated()]

#remove duplicates permanent
data.drop_duplicates(inplace=True)



from autoviz.AutoViz_Class import AutoViz_Class 
AV = AutoViz_Class()
import matplotlib.pyplot as plt
%matplotlib INLINE
filename = 'adalone.csv'
sep =","
dft = AV.AutoViz(
    filename  
)



def class_distribution(data, column_name='Sex'):
    # Display total counts and percentage for each class
    distribution = data[column_name].value_counts()
    percentage = data[column_name].value_counts(normalize=True) * 100
    
    print(f"Class distribution for '{column_name}':")
    print(distribution)
    print("\nPercentage distribution:")
    print(percentage)

# Call the function to display the distribution for the 'Resigned' column
class_distribution(data, 'Sex')


# To show Outliers in the data set run the code 

num_vars = data.select_dtypes(include=['int','float']).columns.tolist()

num_cols = len(num_vars)
num_rows = (num_cols + 2 ) // 3
fig, axs = plt.subplots(nrows=num_rows, ncols=3, figsize=(15, 5*num_rows))
axs = axs.flatten()

for i, var in enumerate (num_vars):
    sns.boxplot(x=data[var],ax=axs[i])
    axs[i].set_title(var)

if num_cols < len(axs):
  for i in range(num_cols , len(axs)):
    fig.delaxes(axs[i])

plt.tight_layout()
plt.show()



def pintu (data,age):
 Q1 = data[age].quantile(0.25)
 Q3 = data[age].quantile(0.75)
 IQR = Q3 - Q1
 data= data.loc[~((data[age] < (Q1 - 1.5 * IQR)) | (data[age] > (Q3 + 1.5 * IQR))),]
 return data

data.boxplot(column=["Age"])

data = pintu(data,"Age")

data.info()


from sklearn import preprocessing
for col in data.select_dtypes(include=['object']).columns:
    label_encoder = preprocessing.LabelEncoder()
    label_encoder.fit(data[col].unique())
    data[col] = label_encoder.transform(data[col])
    print(f'{col} : {data[col].unique()}')



#Segregrating dataset into X and y

X = data.drop("Sex", axis = 1)

y = data["Sex"]

X.head()

y.head()

#Splitting the dataset into testing and training

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)


#Scale the dataset
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)


from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

from sklearn import metrics
from sklearn.metrics import classification_report, confusion_matrix
print(confusion_matrix(y_test, y_pred))#confusion matrix
print(classification_report(y_test, y_pred))#full report



#Building the Logistic Model 

from sklearn.linear_model import LogisticRegression

classifier = LogisticRegression(random_state=0)

classifier.fit(X_train,y_train)


#Testing the model

y_predict_test = classifier.predict(X_test)



#Checking confusion matrix and accuracy of the model

from sklearn.metrics import classification_report,confusion_matrix

print(confusion_matrix(y_predict_test,y_test))

from sklearn.metrics import classification_report
print(classification_report(y_test,y_predict_test,))



n_est=100
from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier(n_estimators=n_est, n_jobs=-1, random_state=0)
rfc.fit(X_train, y_train);

print("Training data accuracy:", rfc.score(X_train, y_train))
print("Testing data accuracy", rfc.score(X_test, y_test)) 

from sklearn.metrics import accuracy_score
predictions = rfc.predict(X_test)
acc = accuracy_score(y_test, predictions)
print(str(np.round(acc*100, 2))+'%')

from sklearn.metrics import accuracy_score
predictions = classifier.predict(X_test)
acc = accuracy_score(y_test, predictions)
print(str(np.round(acc*100, 2))+'%')


from xgboost import XGBClassifier

xgbc = XGBClassifier(tree_method='auto', n_estimators=n_est, n_jobs=-1, random_state=0)
xgbc.fit(X_train, y_train);

print("Training data accuracy:", xgbc.score(X_train, y_train))
print("Testing data accuracy", xgbc.score(X_test, y_test))

from sklearn.metrics import accuracy_score
predictions = xgbc.predict(X_test)
acc = accuracy_score(y_test, predictions)
print(str(np.round(acc*100, 2))+'%')




from xgboost import XGBClassifier
from sklearn.model_selection import RandomizedSearchCV
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import numpy as np

# Define the parameter grid for tuning
param_grid = {
    'n_estimators': [50, 100, 150, 200, 300],
    'max_depth': [3, 5, 7, 10],
    'learning_rate': [0.01, 0.05, 0.1, 0.2, 0.3],
    'subsample': [0.6, 0.8, 1.0],
    'colsample_bytree': [0.6, 0.8, 1.0],
    'gamma': [0, 0.1, 0.2, 0.3, 0.4],
    'reg_alpha': [0, 0.01, 0.1, 1],
    'reg_lambda': [0, 0.01, 0.1, 1]
}

# Initialize the model
xgb_model = XGBClassifier(tree_method='auto', n_jobs=-1, random_state=0)

# Perform RandomizedSearchCV
random_search = RandomizedSearchCV(
    estimator=xgb_model,
    param_distributions=param_grid,
    n_iter=50,  # Number of random combinations to try; increase for better results
    scoring='f1_weighted',  # Target a balanced F1 score
    cv=5,
    verbose=1,
    random_state=0,
    n_jobs=-1
)

# Fit RandomizedSearchCV
random_search.fit(X_train, y_train)

# Best model after hyperparameter tuning
best_model = random_search.best_estimator_
